AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS

  Sample SAM Template for AWS

Globals:
  Function:
    Timeout: 900
  Api:
    Cors:
      AllowMethods: "'POST,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  CognitoAuthorizerArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Reference to Cognito UserPool for the stage
    Default: CognitoAuthorizerArn
  ApiDomain:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: The Api domain
    Default: /NVA/ApiDomain
  CustomDomain:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Custom API to connect this lambda to
    Default: CustomDomain
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
    Default: doi-fetch
  CrossrefPlusApiTokenName:
    Type: String
    Default: CrossRefPlusApiToken
  CrossrefPlusApiTokenKey:
    Type: String
    Default: token
  MaxConcurrency:
    Type: String
    Description: Maximum capacity for provisioned concurrency
    Default: 10
  MinConcurrency:
    Type: String
    Description: Minimum capacity for provisioned concurrency
    Default: 1
  LambdaMemorySize:
    Type: Number
    Default: 1408
  ScaleOutUsageThreshold:
    Type: Number
    Default: 0.80
  ScopusZipBucketName:
    Type: String
    Default: "scopus-zip-files"
    Description: Name of bucket for incoming zip-files to be unzipped (containing scopus xml-files)
  ScopusXmlBucketName:
    Type: String
    Default: "scopus-xml-files"
    Description: Name of bucket for unzipped scopus xml files
  NvaEventsBucketName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/NVA/Events/EventsBucketName'
  NvaEventsBucketArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/NVA/Events/EventsBucketArn'
  NvaEventsBusArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/NVA/Events/EventsBusArn'
  NvaEventsBusName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/NVA/Events/EventsBusName'

Resources:
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup

  NvaFetchDoiFunctionApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        openapi: 3.0.0
        info:
          title: NVA Fetch DOI
          version: '1.0'
        paths:
          /:
            post:
              summary: Fetch data from DOI and return summary
              security:
                - CognitoUserPool: []
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/DoiLookup'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaFetchDoiFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
                passthroughBehavior: WHEN_NO_MATCH
              responses:
                '200':
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Summary'
        components:
          securitySchemes:
            CognitoUserPool:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: cognito_user_pools
              x-amazon-apigateway-authorizer:
                type: cognito_user_pools
                providerARNs:
                  - !Ref CognitoAuthorizerArn
          schemas:
            DoiLookup:
              type: object
              properties:
                doiUrl:
                  type: string
              required:
                - doiUrl
            Summary:
              type: object
              properties:
                identifier:
                  type: string
                title:
                  type: string
                creatorName:
                  type: string
                date:
                  type: object
                  properties:
                    year:
                      type: string
                    month:
                      type: string
                    day:
                      type: string
              required:
                - identifier
                - title

  NvaFetchDoiFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'
        - PolicyName: readSecret
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:CrossRefPlusApiToken*'

  NvaFetchDoiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create-publication-from-doi
      Handler: no.unit.nva.doi.fetch.MainHandler::handleRequest
      Runtime: java11
      MemorySize: !Ref LambdaMemorySize
#      AutoPublishAlias: live
#      DeploymentPreference:
#        Type: AllAtOnce
#      ProvisionedConcurrencyConfig:
#        ProvisionedConcurrentExecutions: 1
      Role: !GetAtt NvaFetchDoiFunctionRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          PUBLICATION_API_SCHEME: https
          PUBLICATION_API_HOST:  !Join [ '.', [ 'api', !Ref CustomDomain ] ]
          BARE_PROXY_API_URI: !Sub 'https://${CustomDomain}'
          CROSSREFPLUSAPITOKEN_NAME: !Ref CrossrefPlusApiTokenName
          CROSSREFPLUSAPITOKEN_KEY:  !Ref CrossrefPlusApiTokenKey
          ID_NAMESPACE: !Sub 'https://api.${CustomDomain}/${CustomDomainBasePath}'
      Events:
        NvaDoi:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref NvaFetchDoiFunctionApi


  NvaScopusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create-publication-from-scopus
      Handler: no.sikt.nva.scopus.ScopusHandler::handleRequest
      Runtime: java11
      MemorySize: !Ref LambdaMemorySize
      Role: !GetAtt ScopusHandlersRole.Arn
      Environment:
        Variables:
          EVENTS_BUCKET: !Ref NvaEventsBucketName
          EVENTS_BUS: !Ref NvaEventsBusName
          API_HOST: !Ref ApiDomain
      Events:
        Scopus:
          Type: S3
          Properties:
            Bucket: !Ref ScopusXmlBucket
            Events: 's3:ObjectCreated:*'

#  NvaFetchDoiFunctionScalableTarget:
#    Type: AWS::ApplicationAutoScaling::ScalableTarget
#    Properties:
#      MaxCapacity: !Ref MaxConcurrency
#      MinCapacity: !Ref MinConcurrency
#      ResourceId: !Sub function:${NvaFetchDoiFunction}:live
#      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
#      ScalableDimension: lambda:function:ProvisionedConcurrency
#      ServiceNamespace: lambda
#    DependsOn: NvaFetchDoiFunctionAliaslive
#  NvaFetchDoiFunctionScalingPolicy:
#    Type: AWS::ApplicationAutoScaling::ScalingPolicy
#    Properties:
#      PolicyName: utilization
#      PolicyType: TargetTrackingScaling
#      ScalingTargetId: !Ref NvaFetchDoiFunctionScalableTarget
#      TargetTrackingScalingPolicyConfiguration:
#        TargetValue: !Ref ScaleOutUsageThreshold
#        PredefinedMetricSpecification:
#          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization

  NvaFetchDoiFunctionBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Ref CustomDomainBasePath
      DomainName: !Join [ '.', [ 'api', !Ref CustomDomain ] ]
      RestApiId: !Ref NvaFetchDoiFunctionApi
      Stage: !Ref NvaFetchDoiFunctionApi.Stage

  #============================ Deploy API ============================================================================#
  # This solves the problem described here:
  # https://stackoverflow.com/questions/41423439/cloudformation-doesnt-deploy-to-api-gateway-stages-on-update
  #====================================================================================================================#

  ApiGatewayCreateDeploymentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ApiGatewayAdmin
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:POST
                Resource: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${NvaFetchDoiFunctionApi}/deployments'

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html
  ApiGatewayCreateDeploymentLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt ApiGatewayCreateDeploymentLambdaRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: |
          import json, boto3
          import cfnresponse
          client = boto3.client('apigateway')
          def lambda_handler(event, context):
            responseData = {}
            responseStatus = cfnresponse.SUCCESS
            if event['RequestType'] == 'Update':
              try:
                properties = event['ResourceProperties']
                response = client.create_deployment(
                  restApiId=properties['RestApiId'],
                  stageName=properties['StageName'],
                  description='Deployed from Custom Resource'
                )
              except:
                responseStatus = cfnresponse.FAILED
            cfnresponse.send(event, context, responseStatus, responseData)
  ApiGatewayCreateDeploymentCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ApiGatewayCreateDeploymentLambda.Arn
      RestApiId: !Ref NvaFetchDoiFunctionApi
      StageName: !Ref NvaFetchDoiFunctionApi.Stage
      Timestamp: '${BUILD_TIMESTAMP}'
      AuthorizerArn: !Ref CognitoAuthorizerArn

  ScopusHandlersRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  DefaultLambdaPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub DefaultLambdaPermissions-${AWS::StackName}
      Roles:
        - !Ref ScopusHandlersRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - lambda:InvokeFunction
            Resource: "*"

  ScopusBucketsAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ScopusBucketsAccessPolicy-${AWS::StackName}
      Roles:
        - !Ref ScopusHandlersRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:*'
            Resource:
              - !Sub '${ScopusXmlBucket.Arn}/*'
              - !Sub '${ScopusZipBucket.Arn}/*'

  SendEventsToNvaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub SendEventsToNva-${AWS::StackName}
      Roles:
        - !Ref ScopusHandlersRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:*'
            Resource:
              - !Sub '${NvaEventsBucketArn}/*'
          - Effect: Allow
            Action:
              - events:PutEvents
            Resource:
              - !Ref NvaEventsBusArn

  ScopusUnzipperFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      MemorySize: !Ref LambdaMemorySize
      Runtime: python3.8
      Environment:
        Variables:
          XML_BUCKET_NAME: !Ref ScopusXmlBucket
      PackageType: Zip
      InlineCode: |
        import boto3, zipfile, os
        from io import BytesIO
        def lambda_handler(event, context):
            xml_bucket = os.environ['XML_BUCKET_NAME']
            zip_bucket = event['Records'][0]['s3']['bucket']['name']
            zip_file = event['Records'][0]['s3']['object']['key']
            client = boto3.client('s3')
            resource = boto3.resource('s3')
            zip_object = resource.Object(bucket_name=zip_bucket, key=zip_file)
            buffer = BytesIO(zip_object.get()['Body'].read())
            z = zipfile.ZipFile(buffer)
            for fname in z.namelist():
                client.put_object(
                    Body=z.open(fname).read(),
                    Bucket=zip_bucket if fname.endswith('.zip') else xml_bucket,
                    Key=f'unzipped/{fname}' if fname.endswith('.zip') else fname
                )
      Role: !GetAtt ScopusHandlersRole.Arn
      Events:
        UnzipEvent:
          Type: S3
          Properties:
            Bucket: !Ref ScopusZipBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: '.zip'

  ScopusZipBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub "${ScopusZipBucketName}-${AWS::AccountId}"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter3Days
            Status: Enabled
            ExpirationInDays: 3
            Prefix: 'unzipped'

  ScopusXmlBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub "${ScopusXmlBucketName}-${AWS::AccountId}"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter3Days
            Status: Enabled
            ExpirationInDays: 3