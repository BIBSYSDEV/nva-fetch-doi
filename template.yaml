AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS

  Sample SAM Template for AWS

Metadata:
  AWS::ServerlessRepo::Application:
    Name: nva-fetch-doi
    Description: Backend for retrieving metadata from DOI source
    Author: Unit
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE
    Labels: ['${GIT_REPO}', '${CODEBUILD_RESOLVED_SOURCE_VERSION}', '@${BUILD_TIMESTAMP}']

Globals:
  Function:
    Timeout: 20
  Api:
    Cors:
      AllowMethods: "'POST,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  CognitoAuthorizerArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Reference to Cognito UserPool for the stage
    Default: CognitoAuthorizerArn
  CustomDomain:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Custom API to connect this lambda to
    Default: CustomDomain
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
  CrossrefPlusApiTokenName:
    Type: String
    Default: CrossRefPlusApiToken
  CrossrefPlusApiTokenKey:
    Type: String
    Default: token
  MaxConcurrency:
    Type: String
    Description: Maximum capacity for provisioned concurrency
    Default: 10
  MinConcurrency:
    Type: String
    Description: Minimum capacity for provisioned concurrency
    Default: 1
  LambdaMemorySize:
    Type: Number
    Default: 384
  ScaleOutUsageThreshold:
    Type: Number
    Default: 0.80

Resources:
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup

  NvaFetchDoiFunctionApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        openapi: 3.0.0
        info:
          title: NVA Fetch DOI
          version: '1.0'
        paths:
          /:
            post:
              summary: Fetch data from DOI and return summary
              security:
                - CognitoUserPool: []
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/DoiLookup'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaFetchDoiFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
                passthroughBehavior: WHEN_NO_MATCH
              responses:
                '200':
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Summary'
        components:
          securitySchemes:
            CognitoUserPool:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: cognito_user_pools
              x-amazon-apigateway-authorizer:
                type: cognito_user_pools
                providerARNs:
                  - !Ref CognitoAuthorizerArn
          schemas:
            DoiLookup:
              type: object
              properties:
                doiUrl:
                  type: string
              required:
                - doiUrl
            Summary:
              type: object
              properties:
                identifier:
                  type: string
                title:
                  type: string
                creatorName:
                  type: string
                date:
                  type: object
                  properties:
                    year:
                      type: string
                    month:
                      type: string
                    day:
                      type: string
              required:
                - identifier
                - title

  NvaFetchDoiFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'
        - PolicyName: readSecret
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:CrossRefPlusApiToken*'

  NvaFetchDoiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create-publication-from-doi
      Handler: no.unit.nva.doi.fetch.MainHandler::handleRequest
      Runtime: java11
      MemorySize: !Ref LambdaMemorySize
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Role: !GetAtt NvaFetchDoiFunctionRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          PUBLICATION_API_SCHEME: https
          PUBLICATION_API_HOST:  !Join [ '.', [ 'api', !Ref CustomDomain ] ]
          BARE_PROXY_API_URI: !Sub 'https://${CustomDomain}'
          CROSSREFPLUSAPITOKEN_NAME: !Ref CrossrefPlusApiTokenName
          CROSSREFPLUSAPITOKEN_KEY:  !Ref CrossrefPlusApiTokenKey
      Events:
        NvaDoi:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref NvaFetchDoiFunctionApi

  NvaFetchDoiFunctionScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxConcurrency
      MinCapacity: !Ref MinConcurrency
      ResourceId: !Sub function:${NvaFetchDoiFunction}:live
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: NvaFetchDoiFunctionAliaslive
  NvaFetchDoiFunctionScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: utilization
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref NvaFetchDoiFunctionScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: !Ref ScaleOutUsageThreshold
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization



  NvaFetchDoiFunctionBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Ref CustomDomainBasePath
      DomainName: !Join [ '.', [ 'api', !Ref CustomDomain ] ]
      RestApiId: !Ref NvaFetchDoiFunctionApi
      Stage: !Ref NvaFetchDoiFunctionApi.Stage
