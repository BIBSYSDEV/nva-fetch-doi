plugins {
    id 'java-library'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'nebula.lint' version '16.8.0'
}

group 'no.unit.nva'
version '1.0-SNAPSHOT'

allprojects {
    apply plugin: 'nebula.lint'

    gradleLint.rules = ['unused-dependency']

    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'

    sourceCompatibility = JavaVersion.VERSION_11
    // source-code version and must be <= targetCompatibility
    targetCompatibility = JavaVersion.VERSION_11 // bytecode target version

    def junit5Version = '5.6.0'

    dependencies {
        testImplementation group: 'com.github.BIBSYSDEV', name: 'nva-testutils', version: 'v0.1.6'
        testImplementation(group: 'junit', name: 'junit', version: '4.13') {
            constraints {
                implementation(group: 'org.hamcrest', name: 'hamcrest-core', version: '2.2')
            }
            because 'We have some junit4 code still running'
        }
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.2'
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.2.4'
        testImplementation group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.19.0'
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter', version: junit5Version
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junit5Version
        testImplementation(group: 'org.hamcrest', name: 'hamcrest') {
            constraints {
                implementation(group: 'org.hamcrest', name: 'hamcrest', version: '2.2') {
                    because 'Our usage does not differ from 1.x'
                }
            }
        }
    }

    test {
        useJUnitPlatform()
        failFast = true
        testLogging {
            events 'skipped', 'passed', 'failed'
        }
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    pmd {
        ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
        ruleSets = []
        ignoreFailures = false
    }

    checkstyle {
        configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
        showViolations = true
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled false
            html.enabled true
            html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
        }
    }

    check.dependsOn jacocoTestCoverageVerification
    jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    counter = 'METHOD'
                    value = 'COVEREDRATIO'
                    minimum = 0.50
                }
            }

            rule {
                limit {
                    counter = 'CLASS'
                    value = 'COVEREDRATIO'
                    minimum = 0.50
                }
            }
        }
    }

}